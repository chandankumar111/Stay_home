<%- include('partials/header', { title: 'Owner Dashboard' }) %>

<h2>Owner Dashboard - Manage Properties</h2>

<button id="addPropertyBtn">Add New Property</button>

<div id="propertyFormContainer" style="display:none;">
  <h3 id="formTitle">Add Property</h3>
  <form id="propertyForm">
    <input type="hidden" id="propertyId" />
    <label for="title">Title:</label>
    <input type="text" id="title" name="title" required />

    <label for="description">Description:</label>
    <textarea id="description" name="description" required></textarea>

    <label for="type">Type:</label>
    <select id="type" name="type" required>
      <option value="pg">PG</option>
      <option value="flat">Flat</option>
      <option value="room">Room</option>
    </select>

    <label for="address">Address:</label>
    <input type="text" id="address" name="address" required />

    <label for="lng">Longitude:</label>
    <input type="number" id="lng" name="lng" step="any" required />

    <label for="lat">Latitude:</label>
    <input type="number" id="lat" name="lat" step="any" required />

    <label for="price">Price:</label>
    <input type="number" id="price" name="price" required />

    <label for="available">Available:</label>
    <input type="checkbox" id="available" name="available" checked />

    <button type="submit">Save Property</button>
    <button type="button" id="cancelBtn">Cancel</button>
  </form>
</div>

<ul id="propertyList"></ul>

<script>
  const token = localStorage.getItem('token');
  const propertyList = document.getElementById('propertyList');
  const addPropertyBtn = document.getElementById('addPropertyBtn');
  const propertyFormContainer = document.getElementById('propertyFormContainer');
  const propertyForm = document.getElementById('propertyForm');
  const formTitle = document.getElementById('formTitle');
  const cancelBtn = document.getElementById('cancelBtn');

  let editingPropertyId = null;

  async function fetchProperties() {
    try {
      const response = await axios.get('/api/properties/owner', {
        headers: { Authorization: 'Bearer ' + token }
      });
      const properties = response.data;
      propertyList.innerHTML = '';
      properties.forEach(property => {
        const li = document.createElement('li');
        li.innerHTML = `
          <strong>${property.title}</strong> - ${property.type} - â‚¹${property.price} <br/>
          ${property.address} <br/>
          <button onclick="editProperty('${property._id}')">Edit</button>
          <button onclick="deleteProperty('${property._id}')">Delete</button>
        `;
        propertyList.appendChild(li);
      });
    } catch (error) {
      alert('Failed to fetch properties');
    }
  }

  addPropertyBtn.addEventListener('click', () => {
    editingPropertyId = null;
    formTitle.textContent = 'Add Property';
    propertyForm.reset();
    propertyFormContainer.style.display = 'block';
  });

  cancelBtn.addEventListener('click', () => {
    propertyFormContainer.style.display = 'none';
  });

  propertyForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const data = {
      title: propertyForm.title.value,
      description: propertyForm.description.value,
      type: propertyForm.type.value,
      address: propertyForm.address.value,
      location: {
        type: 'Point',
        coordinates: [parseFloat(propertyForm.lng.value), parseFloat(propertyForm.lat.value)]
      },
      price: parseFloat(propertyForm.price.value),
      available: propertyForm.available.checked
    };

    try {
      if (editingPropertyId) {
        await axios.put(`/api/properties/${editingPropertyId}`, data, {
          headers: { Authorization: 'Bearer ' + token }
        });
        alert('Property updated');
      } else {
        await axios.post('/api/properties', data, {
          headers: { Authorization: 'Bearer ' + token }
        });
        alert('Property added');
      }
      propertyFormContainer.style.display = 'none';
      fetchProperties();
    } catch (error) {
      alert('Failed to save property');
    }
  });

  async function editProperty(id) {
    try {
      const response = await axios.get(`/api/properties/owner`, {
        headers: { Authorization: 'Bearer ' + token }
      });
      const property = response.data.find(p => p._id === id);
      if (!property) {
        alert('Property not found');
        return;
      }
      editingPropertyId = id;
      formTitle.textContent = 'Edit Property';
      propertyForm.title.value = property.title;
      propertyForm.description.value = property.description;
      propertyForm.type.value = property.type;
      propertyForm.address.value = property.address;
      propertyForm.lng.value = property.location.coordinates[0];
      propertyForm.lat.value = property.location.coordinates[1];
      propertyForm.price.value = property.price;
      propertyForm.available.checked = property.available;
      propertyFormContainer.style.display = 'block';
    } catch (error) {
      alert('Failed to load property');
    }
  }

  async function deleteProperty(id) {
    if (!confirm('Are you sure you want to delete this property?')) return;
    try {
      await axios.delete(`/api/properties/${id}`, {
        headers: { Authorization: 'Bearer ' + token }
      });
      alert('Property deleted');
      fetchProperties();
    } catch (error) {
      alert('Failed to delete property');
    }
  }

  fetchProperties();
</script>

<%- include('partials/footer') %>
